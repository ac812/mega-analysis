#!/usr/local/bin/python

import os
import sys
import MEGA
import rpy2.robjects as robjects
from rpy2.robjects.vectors import DataFrame

if len(sys.argv) != 4:
    print "%s admixture.Q famFile popList"
    sys.exit(-1)

admix = sys.argv[1]
indList = sys.argv[2]
popList = sys.argv[3]

indivPop = MEGA.getPop4Indiv()

inds = []
f = open(indList)
for l in f:
    inds.append(l.split(" ")[0])
f.close()

pops = []
f = open(popList)
for l in f:
    pops.append(l.rstrip())
f.close()


lines = []
f = open(admix)
for l in f:
    #lines.append(map(lambda x: float(x), l.rstrip().split(" ")))
    lines.append(l)
f.close()

popMembers = {}
originalPopOrder=[]
myPop = []
for i in range(len(inds)):
    pop = indivPop[inds[i]]
    popMembers.setdefault(pop, []).append(i)
    myPop.append(pop)
    if pop not in originalPopOrder:
        originalPopOrder.append(pop)

def clusterPop(admix, indexes):
    subf = "adm.%d" % (os.getpid(),)
    w = open(subf, "w")
    f = open(admix)
    fPos = 0
    oldOrder = []
    for l in f:
        if fPos in indexes:
            w.write(l)
            oldOrder.append(fPos)
        fPos += 1
    f.close()
    w.close()
    df = DataFrame.from_csvfile(subf, sep=" ", header=False)
    d=robjects.r.hclust(robjects.r.dist(df))
    for name, value in d.iteritems():
        if name=="order":
            order = value
            break
    os.remove(subf)
    reOrder = []
    for pos in order:
        reOrder.append(oldOrder[pos-1])
    return reOrder

popReorder = {}
for pop in popMembers:
    popReorder[pop] = clusterPop(admix, popMembers[pop])

internalReorder = []
for pop in pops:
    for indiv in popReorder[pop]:
        print str(indiv) + "\t" +  pop + "\t" + inds[indiv]
